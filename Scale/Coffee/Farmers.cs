using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.Entity;

namespace Coffee
{
    public partial class Farmers : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        Navigation navigation;
        AutoweighEntities Db = new AutoweighEntities(coffee.ConnectionString());
        public Farmers()
        {

            InitializeComponent();
            navigation = new Navigation(farmerBindingSource, farmerGridControl, Db,true,false);
            this.Controls.Add(navigation);

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
              
            // Call the Load method to get the data for the given DbSet from the database.
         
            // This line of code is generated by Data Source Configuration Wizard
            farmerBindingSource.DataSource = Db.Farmers.ToList();
                

            foreach (var item in Enum.GetValues(typeof(server.Account_Category)))
                repositoryItemImageComboBox1.Items.Add(item.ToString(), (int)item, -1);
        }
    
        private void gridControl1_Click(object sender, EventArgs e)
        {

        }

        private void saveToolStripButton_Click(object sender, EventArgs e)
        {
            try
            {
              
                Db.SaveChanges(AutoweighEntities.Savetype.Farmer);
                MessageBox.Show("Saved successfully");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Unable to save, check if the member no exists");
            }
        }

        private void Farmers_Load(object sender, EventArgs e)
        {

        }

        private void Farmers_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                if (Db.ChangeTracker.Entries().Any(ee => ee.State == EntityState.Added
                                                        || ee.State == EntityState.Modified
                                                        || ee.State == EntityState.Deleted))
                {
                    DialogResult result1 = MessageBox.Show("There are changes made to your data, do you want to save them?", "Save Changes", MessageBoxButtons.YesNo);
                    if (result1 == DialogResult.Yes)
                        Db.SaveChanges();
                }
            }
            catch (Exception ex) {
            
            }
        }

        private void bindingNavigatorDeleteItem_Click(object sender, EventArgs e)
        {
          
        }

        private void bindingNavigatorAddNewItem_Click(object sender, EventArgs e)
        {

        }

        private void gridView1_ShowingEditor(object sender, CancelEventArgs e)
        {
            
        }

        private void filterWithThisValueToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void gridView1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right)
            {

                cellcontext.Show(farmerGridControl, e.Location);
            }
        }

        private void cellcontext_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            switch (e.ClickedItem.Name) { 
                case "filterWithThisValueToolStripMenuItem":
                  Farmer f = gridView1.GetFocusedRow() as Farmer;
                  var fr = new Reports.Farmer_collection(f);
                  var r = new Report(fr);
                  r.MdiParent = this.MdiParent;
                  r.Show();
                  break;
            }
        }

        private void cellcontext_Opening(object sender, CancelEventArgs e)
        {

        }

        private void gridView1_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            //Farmer focusedRow = (Farmer)gridView1.GetFocusedRow();
            //e.Valid = focusedRow.No == null;
            
            ////if (!focusedRow.IsNew) return;
            //////foreach (DataColumn column in focusedRow.DataView.Table.Columns)
            //////{
            ////    e.Valid = !focusedRow.Row.IsNull(colNo);
            //    if (!e.Valid) return;
            ////}
        }

        private void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            //DevExpress.XtraGrid.Views.Grid.GridView view = sender as DevExpress.XtraGrid.Views.Grid.GridView;

            //Farmer f = (Farmer)e.Row;
            //if (f.No == null || f.No.Equals(""))
            //{
            //    view.SetColumnError(colNo, "Farmer No is required");
            //    view.CancelUpdateCurrentRow();
            
            //}
        }

        private void gridView1_CustomColumnSort(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnSortEventArgs e)
        {
            if (e.Column.FieldName == colNo.FieldName)
            {
                e.Handled = true;
                try {
                    int month1,month2;

                    int.TryParse(e.Value1.ToString(), out month1);

                    int.TryParse(e.Value2.ToString(), out month2);// Convert.ToInt32(e.Value1);
               
                if (month1 > month2)
                    e.Result = 1;
                else
                    if (month1 < month2)
                        e.Result = -1;
                    else e.Result = System.Collections.Comparer.Default.Compare(month1, month2);
            }

                catch (Exception ex) { Logging.Logging.ReportError(ex); }
            }
        }

        private void farmerGridControl_Click(object sender, EventArgs e)
        {

        }

        private void farmerBindingSource_CurrentItemChanged(object sender, EventArgs e)
        {
            var dd = "";
        }

        private void farmerBindingSource_AddingNew(object sender, AddingNewEventArgs e)
        {
            try
            {
                Farmer sh = new Farmer();
                sh.Cum_Cherry = 0;
                sh.Cum_Mbuni = 0;
                sh.Factory = coffee.setup.Branch;
                sh.Account_Category = (int)server.Account_Category.Single;
                e.NewObject = sh;
                Db.Farmers.Add(sh);
            }
            catch (Exception ex) { Logging.Logging.ReportError(ex); }
        }
    }
}
