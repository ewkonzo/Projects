//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace M_SACCO_Webservice.Alternate {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Alternate_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/Alternate")]
    public partial class Alternate : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PostMpesaOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunnOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EligibilityOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Alternate() {
            this.Url = global::M_SACCO_Webservice.Properties.Settings.Default.MobileService_Alternate_Alternate;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PostMpesaCompletedEventHandler PostMpesaCompleted;
        
        /// <remarks/>
        public event RunnCompletedEventHandler RunnCompleted;
        
        /// <remarks/>
        public event SendSmsCompletedEventHandler SendSmsCompleted;
        
        /// <remarks/>
        public event EligibilityCompletedEventHandler EligibilityCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Alternate:PostMpesa", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Alternate", ResponseElementName="PostMpesa_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Alternate", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PostMpesa() {
            this.Invoke("PostMpesa", new object[0]);
        }
        
        /// <remarks/>
        public void PostMpesaAsync() {
            this.PostMpesaAsync(null);
        }
        
        /// <remarks/>
        public void PostMpesaAsync(object userState) {
            if ((this.PostMpesaOperationCompleted == null)) {
                this.PostMpesaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostMpesaOperationCompleted);
            }
            this.InvokeAsync("PostMpesa", new object[0], this.PostMpesaOperationCompleted, userState);
        }
        
        private void OnPostMpesaOperationCompleted(object arg) {
            if ((this.PostMpesaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostMpesaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Alternate:Runn", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Alternate", ResponseElementName="Runn_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Alternate", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Runn() {
            this.Invoke("Runn", new object[0]);
        }
        
        /// <remarks/>
        public void RunnAsync() {
            this.RunnAsync(null);
        }
        
        /// <remarks/>
        public void RunnAsync(object userState) {
            if ((this.RunnOperationCompleted == null)) {
                this.RunnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunnOperationCompleted);
            }
            this.InvokeAsync("Runn", new object[0], this.RunnOperationCompleted, userState);
        }
        
        private void OnRunnOperationCompleted(object arg) {
            if ((this.RunnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunnCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Alternate:SendSms", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Alternate", ResponseElementName="SendSms_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Alternate", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendSms(string source, string telephone, string textsms, bool charge, string account) {
            this.Invoke("SendSms", new object[] {
                        source,
                        telephone,
                        textsms,
                        charge,
                        account});
        }
        
        /// <remarks/>
        public void SendSmsAsync(string source, string telephone, string textsms, bool charge, string account) {
            this.SendSmsAsync(source, telephone, textsms, charge, account, null);
        }
        
        /// <remarks/>
        public void SendSmsAsync(string source, string telephone, string textsms, bool charge, string account, object userState) {
            if ((this.SendSmsOperationCompleted == null)) {
                this.SendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsOperationCompleted);
            }
            this.InvokeAsync("SendSms", new object[] {
                        source,
                        telephone,
                        textsms,
                        charge,
                        account}, this.SendSmsOperationCompleted, userState);
        }
        
        private void OnSendSmsOperationCompleted(object arg) {
            if ((this.SendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/Alternate:Eligibility", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/Alternate", ResponseElementName="Eligibility_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/Alternate", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public decimal Eligibility(string phone) {
            object[] results = this.Invoke("Eligibility", new object[] {
                        phone});
            return ((decimal)(results[0]));
        }
        
        /// <remarks/>
        public void EligibilityAsync(string phone) {
            this.EligibilityAsync(phone, null);
        }
        
        /// <remarks/>
        public void EligibilityAsync(string phone, object userState) {
            if ((this.EligibilityOperationCompleted == null)) {
                this.EligibilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEligibilityOperationCompleted);
            }
            this.InvokeAsync("Eligibility", new object[] {
                        phone}, this.EligibilityOperationCompleted, userState);
        }
        
        private void OnEligibilityOperationCompleted(object arg) {
            if ((this.EligibilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EligibilityCompleted(this, new EligibilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void PostMpesaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RunnCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void EligibilityCompletedEventHandler(object sender, EligibilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EligibilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EligibilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591